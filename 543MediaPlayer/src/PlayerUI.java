
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.FileNotFoundException;

import javax.swing.BorderFactory;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import javazoom.jlgui.basicplayer.BasicPlayerException;



public class PlayerUI extends javax.swing.JFrame implements ActionListener, MouseListener {

	// Variables declaration 
	// menu types whose name starts with 'pop' is a popupMenu item
	// BPinterface is the class that interfaces with the BasicPlayer
	// FileDropHandler is the handler that handles the event of drag
	// 		and drop of files onto the JTable
	// DefualtTableModel is the "display" data of the JTable.  Editing the 
	//		contents of this (and change the data that's displayed should only be done 
	// 		in the DataBase object 
	// MusicDB, this is the DataBase object where we store all the songs.  
    private java.awt.Canvas canvas1;
    private JMenuBar menuBar;
    private JMenu menu;
    private JPopupMenu popup;
    private JMenuItem popOpen;
    private JMenuItem static_Open;
    private JMenuItem popDelete;
    private JMenuItem static_Delete;
    private JMenuItem addSong;
    private JMenuItem exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private JPanel panel1;
    private JButton play;
    private java.awt.TextArea playerText;
    private JList playlistNav;
    private JSlider progressSlide;
    private JButton skipBack;
    private JButton skipNext;
    private JSlider volumeSlide;
    private MusicDB musicDB;
    private boolean playing= false;
    private boolean stopped=true;
    BPInterface bpi; 
    FileDropHandler MyTransferHandler;
    int maxIndex;
    int currentIndex;
    DefaultTableModel model;
    private boolean seeking = false;
    String currentSong;
    // End of variables declaration                   
    /**
     * Creates new form PanelUI
     */
    public PlayerUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() 
    {
    	
    	// model is still a DefaultTableModel but I have overridden the isCellEditable() to
    	// always return false for every cell and thus not allow editing of any cell
    	
    	//musicDB = new MusicDB();  // Database must be opened first before anything else is done
    	musicDB = MusicDB.getDataBaseObject();
    	model = new DefaultTableModel(musicDB.getDisplaySet("library"), musicDB.getColumnNames()) 
    	{
    		@Override
    	    public boolean isCellEditable(int row, int column) 
    	    {
    	       return false;
    	    }
    	};
    	
    	musicDB.setUI(model);
        playlistNav = new JList();
        panel1 = new JPanel();
        
        /* buttons */
        play = new JButton();
        play.setIcon(new ImageIcon(getClass().getResource("play.png")));
        play.addActionListener(this);
        skipBack = new JButton();
        skipBack.setIcon(new ImageIcon(getClass().getResource("prev.png")));
        skipBack.addActionListener(this);
        skipNext = new JButton();
        skipNext.setIcon(new ImageIcon(getClass().getResource("next.png")));
        skipNext.addActionListener(this);
        
        playerText = new java.awt.TextArea();
        
        canvas1 = new java.awt.Canvas();
        progressSlide = new javax.swing.JSlider();
        progressSlide.setAutoscrolls(true);
     
        progressSlide.addMouseListener(this);
        progressSlide.setValue(0);
        volumeSlide = new javax.swing.JSlider();
        volumeSlide.setMaximum(100);
        volumeSlide.setPaintTrack(true);
        //volumeSlide.addMouseListener(this);
        bpi = new BPInterface(this);
        
        volumeSlide.addChangeListener(new ChangeListener() 
        {
        	// whenever the value of volumeSlide changes, set the volume to
        	// the current value of the slider
        	  public void stateChanged(ChangeEvent event) 
        	  {
        		  try {
					bpi.setGain((double)(volumeSlide.getValue())/100);
				} catch (BasicPlayerException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        	  }

			
        });
        
        // menu stuff
        menuBar = new JMenuBar();
        menu = new JMenu("File");
        popup = new JPopupMenu();
        //popup.setFocusCycleRoot(true);
        static_Open = new JMenuItem("Open");
        static_Open.addMouseListener(this);
        static_Delete =  new JMenuItem("Delete");
        static_Delete.addMouseListener(this);
        addSong =  new JMenuItem("Add");
        addSong.addMouseListener(this);
        exit = new JMenuItem("Exit");
        exit.addMouseListener(this);
        popOpen = new JMenuItem("open");
        popOpen.addMouseListener(this);
        popDelete = new JMenuItem("delete");
        popDelete.addMouseListener(this);
        popup.add(popOpen);
        //menu.add(new JSeparator());
        popup.add(popDelete);
        menu.add(static_Open);
        menu.add(new JSeparator());
        menu.add(addSong);
        menu.add(new JSeparator());
        menu.add(static_Delete);
        menu.add(new JSeparator());
        menu.add(exit);
        menuBar.add(menu);
        this.setJMenuBar(menuBar);
        
        MyTransferHandler = new FileDropHandler(this);
        jTable1 = new JTable(model)
        {
        	  public Component prepareRenderer(TableCellRenderer renderer,int Index_row, int Index_col) 
        	  {
        		  Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
        		  //even index, selected or not selected
        		  if (Index_row % 2 == 0 && !isCellSelected(Index_row, Index_col)) 
        		  {
        			  comp.setBackground(Color.black);
        			  comp.setForeground(Color.white);
        		  } 
        		  else if (isCellSelected(Index_row, Index_col))  
        		  {
        			  comp.setBackground(Color.RED);
        			  comp.setForeground(Color.WHITE);
        		  }
        		  else 
        		  {
        			  comp.setBackground(Color.white);
        			  comp.setForeground(Color.black);
        		  }
        		  return comp;
        	  	}
        	  
        };
        
        jTable1.addMouseListener(this);
        jTable1.setDropMode(DropMode.USE_SELECTION);
        jTable1.setTransferHandler(MyTransferHandler);
        jTable1.setModel(model);
        jScrollPane1 = new javax.swing.JScrollPane(jTable1);
        jScrollPane1.setBorder(BorderFactory.createBevelBorder(9));
        maxIndex = jTable1.getRowCount();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        /* layout stuff (auto generated by netbeans) */
        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addComponent(skipBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(skipNext, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(skipNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skipBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        playerText.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playerText.setEditable(false);

        volumeSlide.setOrientation(javax.swing.JSlider.VERTICAL);

        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.black, java.awt.Color.black, java.awt.Color.lightGray));

        
        jScrollPane1.setViewportView(jTable1);
        jTable1.setFillsViewportHeight(true);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playlistNav, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(volumeSlide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressSlide, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerText, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(volumeSlide, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(playerText, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(progressSlide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playlistNav, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    
   
    
    public void setProgressMax(int size)
    {
    	progressSlide.setMinimum(0);
    	progressSlide.setMaximum(size);
    }
    
    public void setProgress(int bytes)
    {
    	progressSlide.setValue(bytes);
    }
    
    public void setPlayerText(String str)
    {
    	playerText.setText(str);
    	
    }
    public boolean isSeeking()
    {
    	return seeking;
    }
    public void playNextSong()
    {
			try {
				bpi.stop();
			} catch (BasicPlayerException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		currentIndex = (currentIndex+1) % maxIndex;
		System.out.println("currentIndex = " + currentIndex);
		jTable1.setRowSelectionInterval(currentIndex, currentIndex);
		play.setIcon(new ImageIcon(getClass().getResource("pause.png")));
		try {
			bpi.play((String)jTable1.getValueAt(currentIndex, 5));
			currentSong=(String)jTable1.getValueAt(currentIndex, 5);
			playing = true;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void playPreviousSong()
    {
			try {
				bpi.stop();
			} catch (BasicPlayerException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		
    	if(currentIndex == 0)
    	{
    		currentIndex = maxIndex-1;
    	}
    	else
    		currentIndex--;
		jTable1.setRowSelectionInterval(currentIndex, currentIndex);
		play.setIcon(new ImageIcon(getClass().getResource("pause.png")));
		try {
			bpi.play((String)jTable1.getValueAt(currentIndex, 5));
			currentSong=(String)jTable1.getValueAt(currentIndex, 5);
			playing = true;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    public void deleteRows(int[] rows)
    {
    	for(int i = rows.length; i > 0; i--)
    	{
    		String fileName = (String)(model.getValueAt(rows[i-1],model.getColumnCount()-1));
    		System.out.println("deleting: " + fileName);
    		musicDB.deleteEntry("library", fileName);
    		maxIndex--;
    		int index = findInTable();
    		if(index != -1)
    		{
    			currentIndex = index;
    			jTable1.setRowSelectionInterval(currentIndex, currentIndex);
    		}
    	}
    }
    private int findInTable()
    {
    	for(int i = 0; i < jTable1.getRowCount(); i++)
    	{
    		if(currentSong.equals((String)jTable1.getValueAt(i, 5)))
    		{
    			return i;
    		}
    	}
    	return -1;
    }
    public boolean addToList(String fileName)
    {
    	System.out.print("PlayerUI::addtoList(String) -> ");
    	boolean success = false;
    	if(fileName.endsWith("mp3"))
    	{
    		success = musicDB.insertEntry("library", fileName);
    		currentIndex = musicDB.getIndexOf(fileName);
    		maxIndex = jTable1.getRowCount();
    	}
    	return success;
    }
    // this called from the bpinterface to set the desired volume 
    public double getCurrentVolume()
    {
    	return (double)volumeSlide.getValue()/100;
    }
	@Override
	public void mouseClicked(MouseEvent arg0) 
	{
		/* if the mouse is double clicked on the table, play the select song */
		if(arg0.getClickCount() == 2 && !arg0.isConsumed())
		{
			
			if(arg0.getSource() == jTable1)
			{
				
				if(playing)
					try {
						bpi.stop();
					} catch (BasicPlayerException e) {
						// TODO Auto-generated catch block
						//e.printStackTrace();
					}
				currentIndex = jTable1.getSelectedRow();
				try {
					bpi.play((String)jTable1.getValueAt(currentIndex, 5));
					currentSong=(String)jTable1.getValueAt(currentIndex, 5);
					play.setIcon(new ImageIcon(getClass().getResource("pause.png")));
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					//e.printStackTrace();
					
				}
				playing = true;
				
			}
		}
		
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		//if(arg0.getSource() == popup)popup.setVisible(false);
		
	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
		if(arg0.getSource() == progressSlide)
		{
			System.out.println("mouse pressed on progress slider, moving slider to cursor");
			seeking = true;  // block the bpinterface from setting the slider value
			BasicSliderUI ui = (BasicSliderUI)progressSlide.getUI();
			int value = ui.valueForXPosition( arg0.getX() );
			progressSlide.setValue(value);
		}
		// if event is a right click show the popup menu */
		// right click must be over object "listening" to mouse events (mouselistener)
		if(arg0.isMetaDown())
		{
			popup.show(arg0.getComponent(), arg0.getX(), arg0.getY());
		}
		
		
	    /*if the mouse is clicked on the delete option in either the popup or static menu's
		  get the row index for the rows currently selected and call deleterows() */
		if(arg0.getSource() == popDelete || arg0.getSource() == static_Delete)
		{
			deleteRows(jTable1.getSelectedRows());
		}
		
		/* if the menu option selected was popOpen (from the popup menu), static_Open (from the static menu) or,
		   the addSong (from the static menu) then open a filechooser and get user selection.  If the song was 
		   successfully added to the library, play it unless the menu option was addSong. */
		if(arg0.getSource() == popOpen || arg0.getSource() == static_Open || arg0.getSource() == addSong)
		{
			
			JFileChooser chooser = new JFileChooser(); 
			chooser.setLocation(arg0.getX(), arg0.getY());
		    FileNameExtensionFilter filter = new FileNameExtensionFilter("MP3 Audio Files", "mp3");
		    chooser.setFileFilter(filter);
		    chooser.grabFocus();
		    int returnVal; 
		    if(arg0.getSource() == popOpen) returnVal = chooser.showOpenDialog(popup);
		    else
		    	returnVal = chooser.showOpenDialog(menu);
		    
		    if(returnVal == JFileChooser.APPROVE_OPTION) 
		    {
		    	String chosenFile = chooser.getSelectedFile().getAbsolutePath();
		    	if(addToList(chosenFile) && arg0.getSource() != addSong)
		    	{
		    		try {
		    			bpi.stop();
		    			jTable1.setRowSelectionInterval(currentIndex, currentIndex);
						bpi.play(chosenFile);
						currentSong=chosenFile;
						play.setIcon(new ImageIcon(getClass().getResource("pause.png")));
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (BasicPlayerException e) {
						//e.printStackTrace();
					}
		    		playing = true;
		    
		    	}
		    }
		}
		
		else if (arg0.getSource() == exit)
		{
			System.exit(0);
		}
		
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		
		// we can assume that the slider has been set to the desired location @mousepressed
		// so now we simply grab the value (representing a byte location in the song)
		// and call the basicplayer to seek to the desired point in the song
		if(arg0.getSource() == progressSlide)
		{
			try {
				
				int x = progressSlide.getValue();
				bpi.seek(x);
		
			} catch (BasicPlayerException e) {
				e.printStackTrace();
			}
			seeking = false; // allow the bpinterface to resume setting progressSlide value (position)
		}
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource() == play)
		{
			if(!playing && stopped)
			{
				String fileName = null;
				if(!musicDB.isEmpty("library") && (jTable1.getSelectedRow() != -1))
					fileName = (String)jTable1.getValueAt(jTable1.getSelectedRow(), 5);
				else if(!musicDB.isEmpty("library") && (jTable1.getSelectedRow() == -1))
				{
					fileName = (String)jTable1.getValueAt(0, 5);
					jTable1.setRowSelectionInterval(0, 0);
				}
					try {
						bpi.play(fileName);
						currentSong = fileName;
						play.setIcon(new ImageIcon(getClass().getResource("pause.png")));
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
					
				stopped = false;
				playing = true;
			}
			else if (playing == true)
			{
				try {
					if(playing)
					{
						bpi.pause();
						playing = false;
						play.setIcon(new ImageIcon(getClass().getResource("play.png")));
					}
					
				} catch (BasicPlayerException e1) {
					//e1.printStackTrace();
				}
			}
			else
			{
				try {
					bpi.resume();
					playing = true;
					play.setIcon(new ImageIcon(getClass().getResource("pause.png")));
				} catch (BasicPlayerException e1) {
					//e1.printStackTrace();
				}
				
			}
		}
		else if (e.getSource() == skipNext)
		{
			playNextSong();
		}
		else if (e.getSource() == skipBack)
		{
			playPreviousSong();
		}
		
		
	}
	 public static void main(String args[]) {
	       
	        try {
	        	
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) 
	            {
	            	System.out.println(info.getName() + ": " + info.getClassName());
	                if ("Nimbus".equals(info.getName())) 
	                {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                  
	                    //break;
	                }
	                
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(PlayerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>
		 
	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                new PlayerUI().setVisible(true);
	            }
	        });
	    }

    
}
